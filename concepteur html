<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>WebStudio Pro - Ã‰diteur HTML Professionnel</title>
    <style>
        :root {
            --primary-color: #4a6bff;
            --secondary-color: #2d3748;
            --accent-color: #805ad5;
            --light-bg: #f8fafc;
            --dark-bg: #1a202c;
            --success-color: #48bb78;
            --warning-color: #ed8936;
            --danger-color: #e53e3e;
            --text-light: #f7fafc;
            --text-dark: #2d3748;
            --border-color: #e2e8f0;
            --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
            --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
            --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
            --transition: all 0.3s ease;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        body {
            background-color: var(--light-bg);
            color: var(--text-dark);
            height: 100vh;
            display: flex;
            flex-direction: column;
            overflow: hidden;
        }

        /* Header Styles */
        header {
            background-color: var(--secondary-color);
            color: var(--text-light);
            padding: 0.5rem 1rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: var(--shadow-md);
            z-index: 10;
        }

        .logo {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            font-weight: bold;
            font-size: 1.25rem;
        }

        .logo svg {
            width: 24px;
            height: 24px;
            fill: var(--primary-color);
        }

        .main-menu {
            display: flex;
            align-items: center;
        }

        .main-menu-item {
            padding: 0.5rem 1rem;
            color: var(--text-light);
            cursor: pointer;
            transition: var(--transition);
            position: relative;
        }

        .main-menu-item:hover {
            background-color: rgba(255, 255, 255, 0.1);
        }

        .user-menu {
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .icon-btn {
            background: none;
            border: none;
            color: var(--text-light);
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            width: 36px;
            height: 36px;
            border-radius: 4px;
            transition: var(--transition);
        }

        .icon-btn:hover {
            background-color: rgba(255, 255, 255, 0.1);
        }

        .icon-btn svg {
            width: 20px;
            height: 20px;
        }

        /* Main Content Styles */
        .main-container {
            display: flex;
            flex: 1;
            overflow: hidden;
        }

        /* Sidebar Styles */
        .sidebar {
            width: 240px;
            background-color: var(--secondary-color);
            color: var(--text-light);
            display: flex;
            flex-direction: column;
            box-shadow: var(--shadow-md);
            z-index: 5;
        }

        .sidebar-section {
            padding: 1rem;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }

        .sidebar-title {
            font-size: 0.75rem;
            text-transform: uppercase;
            letter-spacing: 1px;
            margin-bottom: 0.5rem;
            color: rgba(255, 255, 255, 0.6);
        }

        .sidebar-menu {
            list-style: none;
        }

        .sidebar-menu-item {
            padding: 0.5rem 0;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            cursor: pointer;
            transition: var(--transition);
            border-radius: 4px;
        }

        .sidebar-menu-item:hover {
            background-color: rgba(255, 255, 255, 0.1);
            padding-left: 0.5rem;
        }

        .sidebar-menu-item.active {
            background-color: var(--primary-color);
            padding-left: 0.5rem;
        }

        .sidebar-menu-item svg {
            width: 16px;
            height: 16px;
        }

        .components-grid {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 0.5rem;
            margin-top: 0.5rem;
        }

        .component-item {
            background-color: rgba(255, 255, 255, 0.1);
            border-radius: 4px;
            padding: 0.5rem;
            text-align: center;
            cursor: pointer;
            transition: var(--transition);
            font-size: 0.8rem;
        }

        .component-item:hover {
            background-color: rgba(255, 255, 255, 0.2);
        }

        .component-item svg {
            width: 20px;
            height: 20px;
            margin-bottom: 0.25rem;
        }

        /* Workspace Styles */
        .workspace {
            flex: 1;
            display: flex;
            flex-direction: column;
            overflow: hidden;
        }

        .toolbar {
            background-color: var(--light-bg);
            padding: 0.5rem;
            display: flex;
            gap: 0.5rem;
            border-bottom: 1px solid var(--border-color);
        }

        .toolbar-btn {
            background-color: white;
            border: 1px solid var(--border-color);
            color: var(--text-dark);
            padding: 0.35rem 0.75rem;
            border-radius: 4px;
            font-size: 0.85rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            cursor: pointer;
            transition: var(--transition);
        }

        .toolbar-btn:hover {
            background-color: var(--light-bg);
        }

        .toolbar-btn.active {
            background-color: var(--primary-color);
            color: white;
            border-color: var(--primary-color);
        }

        .toolbar-btn svg {
            width: 16px;
            height: 16px;
        }

        .toolbar-divider {
            width: 1px;
            background-color: var(--border-color);
            margin: 0 0.25rem;
        }

        .toolbar-dropdown {
            position: relative;
        }

        .dropdown-menu {
            position: absolute;
            top: 100%;
            left: 0;
            background-color: white;
            border-radius: 4px;
            box-shadow: var(--shadow-lg);
            padding: 0.5rem 0;
            min-width: 180px;
            z-index: 100;
            display: none;
        }

        .toolbar-dropdown:hover .dropdown-menu {
            display: block;
        }

        .dropdown-item {
            padding: 0.5rem 1rem;
            cursor: pointer;
            transition: var(--transition);
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .dropdown-item:hover {
            background-color: var(--light-bg);
        }

        .dropdown-item svg {
            width: 16px;
            height: 16px;
        }

        /* Editor Area Styles */
        .editor-area {
            flex: 1;
            display: flex;
            overflow: hidden;
        }

        .code-editor {
            width: 50%;
            display: flex;
            flex-direction: column;
            border-right: 1px solid var(--border-color);
        }

        .code-editor-tabs {
            background-color: var(--light-bg);
            display: flex;
            border-bottom: 1px solid var(--border-color);
        }

        .editor-tab {
            padding: 0.5rem 1rem;
            background-color: var(--light-bg);
            border-right: 1px solid var(--border-color);
            font-size: 0.85rem;
            cursor: pointer;
            transition: var(--transition);
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .editor-tab.active {
            background-color: white;
            border-bottom: 2px solid var(--primary-color);
        }

        .editor-tab svg {
            width: 14px;
            height: 14px;
        }

        .code-panel {
            flex: 1;
            overflow: auto;
            background-color: white;
            position: relative;
        }

        .code-content {
            font-family: 'Consolas', 'Monaco', 'Courier New', monospace;
            font-size: 0.9rem;
            line-height: 1.5;
            padding: 1rem;
            overflow: auto;
            height: 100%;
            white-space: pre;
            counter-reset: line;
        }

        .code-line {
            display: block;
            counter-increment: line;
        }

        .code-line::before {
            content: counter(line);
            display: inline-block;
            width: 2rem;
            padding-right: 0.5rem;
            text-align: right;
            color: #888;
            user-select: none;
        }

        /* Preview Area Styles */
        .preview-area {
            width: 50%;
            display: flex;
            flex-direction: column;
        }

        .preview-header {
            padding: 0.5rem;
            background-color: var(--light-bg);
            border-bottom: 1px solid var(--border-color);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .device-selector {
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .device-btn {
            background: none;
            border: none;
            cursor: pointer;
            padding: 0.25rem;
            border-radius: 4px;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: var(--transition);
        }

        .device-btn:hover {
            background-color: rgba(0, 0, 0, 0.05);
        }

        .device-btn.active {
            color: var(--primary-color);
        }

        .device-btn svg {
            width: 16px;
            height: 16px;
        }

        .preview-actions {
            display: flex;
            gap: 0.5rem;
        }

        .preview-frame-container {
            flex: 1;
            overflow: auto;
            padding: 1rem;
            background-color: #e5e7eb;
            display: flex;
            align-items: flex-start;
            justify-content: center;
        }

        .preview-frame {
            background-color: white;
            box-shadow: var(--shadow-lg);
            transition: all 0.3s ease;
            border: 1px solid var(--border-color);
            width: 100%;
            height: 100%;
        }

        .preview-frame.mobile {
            width: 375px;
            height: 667px;
            border-radius: 20px;
        }

        .preview-frame.tablet {
            width: 768px;
            height: 1024px;
            border-radius: 12px;
        }

        /* Property Panel Styles */
        .properties-panel {
            width: 300px;
            background-color: white;
            border-left: 1px solid var(--border-color);
            overflow-y: auto;
            display: flex;
            flex-direction: column;
        }

        .panel-header {
            padding: 0.75rem 1rem;
            background-color: var(--light-bg);
            font-weight: bold;
            border-bottom: 1px solid var(--border-color);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .panel-close {
            background: none;
            border: none;
            cursor: pointer;
            color: var(--text-dark);
        }

        .panel-close svg {
            width: 16px;
            height: 16px;
        }

        .panel-content {
            padding: 1rem;
        }

        .property-group {
            margin-bottom: 1.5rem;
        }

        .property-group-title {
            font-size: 0.75rem;
            text-transform: uppercase;
            letter-spacing: 1px;
            margin-bottom: 0.75rem;
            color: #64748b;
        }

        .property-row {
            margin-bottom: 1rem;
        }

        .property-label {
            font-size: 0.85rem;
            margin-bottom: 0.25rem;
            display: block;
        }

        .property-input {
            width: 100%;
            padding: 0.5rem;
            border: 1px solid var(--border-color);
            border-radius: 4px;
            font-size: 0.85rem;
        }

        .property-input:focus {
            outline: none;
            border-color: var(--primary-color);
        }

        .property-grid {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 0.5rem;
        }

        .color-input-wrapper {
            display: flex;
            align-items: center;
        }

        .color-preview {
            width: 24px;
            height: 24px;
            border-radius: 4px;
            border: 1px solid var(--border-color);
            margin-right: 0.5rem;
        }

        /* Status Bar Styles */
        .status-bar {
            background-color: var(--secondary-color);
            color: var(--text-light);
            padding: 0.25rem 0.5rem;
            font-size: 0.75rem;
            display: flex;
            justify-content: space-between;
        }

        .status-info {
            display: flex;
            gap: 1rem;
        }

        .status-item {
            display: flex;
            align-items: center;
            gap: 0.25rem;
        }

        .status-item svg {
            width: 12px;
            height: 12px;
        }

        /* Helper Classes */
        .hidden {
            display: none;
        }

        /* Responsive Adjustments */
        @media (max-width: 1200px) {
            .properties-panel {
                width: 240px;
            }
        }

        @media (max-width: 992px) {
            .sidebar {
                width: 64px;
            }
            .sidebar-title, .sidebar-menu-item span {
                display: none;
            }
            .sidebar-menu-item {
                justify-content: center;
                padding: 0.5rem;
            }
            .components-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <!-- Header -->
    <header>
        <div class="logo">
            <svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path d="M3 3h18v18H3V3zm16.5 1.5h-15v15h15v-15z"/>
                <path d="M7 7h10v1.5H7z"/>
                <path d="M7 11h10v1.5H7z"/>
                <path d="M7 15h10v1.5H7z"/>
            </svg>
            <span>WebStudio Pro</span>
        </div>
        <div class="main-menu">
            <div class="main-menu-item">Fichier</div>
            <div class="main-menu-item">Ã‰dition</div>
            <div class="main-menu-item">Affichage</div>
            <div class="main-menu-item">Projet</div>
            <div class="main-menu-item">Outils</div>
            <div class="main-menu-item">Aide</div>
        </div>
        <div class="user-menu">
            <button class="icon-btn" title="Rechercher">
                <svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path fill="currentColor" d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/>
                </svg>
            </button>
            <button class="icon-btn" title="ParamÃ¨tres">
                <svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path fill="currentColor" d="M19.14 12.94c.04-.3.06-.61.06-.94 0-.32-.02-.64-.07-.94l2.03-1.58c.18-.14.23-.41.12-.61l-1.92-3.32c-.12-.22-.37-.29-.59-.22l-2.39.96c-.5-.38-1.03-.7-1.62-.94l-.36-2.54c-.04-.24-.24-.41-.48-.41h-3.84c-.24 0-.43.17-.47.41l-.36 2.54c-.59.24-1.13.57-1.62.94l-2.39-.96c-.22-.08-.47 0-.59.22L2.74 8.87c-.12.21-.08.47.12.61l2.03 1.58c-.05.3-.09.63-.09.94s.02.64.07.94l-2.03 1.58c-.18.14-.23.41-.12.61l1.92 3.32c.12.22.37.29.59.22l2.39-.96c.5.38 1.03.7 1.62.94l.36 2.54c.05.24.24.41.48.41h3.84c.24 0 .44-.17.47-.41l.36-2.54c.59-.24 1.13-.56 1.62-.94l2.39.96c.22.08.47 0 .59-.22l1.92-3.32c.12-.22.07-.47-.12-.61l-2.01-1.58zM12 15.6c-1.98 0-3.6-1.62-3.6-3.6s1.62-3.6 3.6-3.6 3.6 1.62 3.6 3.6-1.62 3.6-3.6 3.6z"/>
                </svg>
            </button>
            <button class="icon-btn" title="Notifications">
                <svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path fill="currentColor" d="M12 22c1.1 0 2-.9 2-2h-4c0 1.1.89 2 2 2zm6-6v-5c0-3.07-1.64-5.64-4.5-6.32V4c0-.83-.67-1.5-1.5-1.5s-1.5.67-1.5 1.5v.68C7.63 5.36 6 7.92 6 11v5l-2 2v1h16v-1l-2-2z"/>
                </svg>
            </button>
            <button class="icon-btn" title="Profil">
                <svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path fill="currentColor" d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 3c1.66 0 3 1.34 3 3s-1.34 3-3 3-3-1.34-3-3 1.34-3 3-3zm0 14.2c-2.5 0-4.71-1.28-6-3.22.03-1.99 4-3.08 6-3.08 1.99 0 5.97 1.09 6 3.08-1.29 1.94-3.5 3.22-6 3.22z"/>
                </svg>
            </button>
        </div>
    </header>

    <!-- Main Content Area -->
    <div class="main-container">
        <!-- Sidebar -->
        <div class="sidebar">
            <div class="sidebar-section">
                <div class="sidebar-title">Projet</div>
                <ul class="sidebar-menu">
                    <li class="sidebar-menu-item active">
                        <svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                            <path fill="currentColor" d="M10 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V8c0-1.1-.9-2-2-2h-8l-2-2z"/>
                        </svg>
                        <span>Structure</span>
                    </li>
                    <li class="sidebar-menu-item">
                        <svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                            <path fill="currentColor" d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-5 14H7v-2h7v2zm3-4H7v-2h10v2zm0-4H7V7h10v2z"/>
                        </svg>
                        <span>Pages</span>
                    </li>
                    <li class="sidebar-menu-item">
                        <svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                            <path fill="currentColor" d="M22 9.24l-7.19-.62L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21 12 17.27 18.18 21l-1.63-7.03L22 9.24zM12 15.4l-3.76 2.27 1-4.28-3.32-2.88 4.38-.38L12 6.1l1.71 4.04 4.38.38-3.32 2.88 1 4.28L12 15.4z"/>
                        </svg>
                        <span>Favoris</span>
                    </li>
                    <li class="sidebar-menu-item">
                        <svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                            <path fill="currentColor" d="M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zm6.93 6h-2.95c-.32-1.25-.78-2.45-1.38-3.56 1.84.63 3.37 1.91 4.33 3.56zM12 4.04c.83 1.2 1.48 2.53 1.91 3.96h-3.82c.43-1.43 1.08-2.76 1.91-3.96zM4.26 14C4.1 13.36 4 12.69 4 12s.1-1.36.26-2h3.38c-.08.66-.14 1.32-.14 2 0 .68.06 1.34.14 2H4.26zm.82 2h2.95c.32 1.25.78 2.45 1.38 3.56-1.84-.63-3.37-1.9-4.33-3.56zm2.95-8H5.08c.96-1.66 2.49-2.93 4.33-3.56C8.81 5.55 8.35 6.75 8.03 8zM12 19.96c-.83-1.2-1.48-2.53-1.91-3.96h3.82c-.43 1.43-1.08 2.76-1.91 3.96zM14.34 14H9.66c-.09-.66-.16-1.32-.16-2 0-.68.07-1.35.16-2h4.68c.09.65.16 1.32.16 2 0 .68-.07 1.34-.16 2zm.25 5.56c.6-1.11 1.06-2.31 1.38-3.56h2.95c-.96 1.65-2.49 2.93-4.33 3.56zM16.36 14c.08-.66.14-1.32.14-2 0-.68-.06-1.34-.14-2h3.38c.16.64.26 1.31.26 2s-.1 1.36-.26 2h-3.38z"/>
                        </svg>
                        <span>Ressources</span>
                    </li>
                </ul>
            </div>
            <div class="sidebar-section">
                <div class="sidebar-title">Composants</div>
                <div class="components-grid">
                    <div class="component-item" draggable="true">
                        <svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                            <path fill="currentColor" d="M20 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm-5 14H4v-4h11v4zm0-5H4V9h11v4zm5 5h-4V9h4v9z"/>
                        </svg>
                        <div>Section</div>
                    </div>
                    <div class="component-item" draggable="true">
                        <svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                            <path fill="currentColor" d="M17,17H7V7H17M21,5V19A2,2 0 0,1 19,21H5A2,2 0 0,1 3,19V5A2,2 0 0,1 5,3H19A2,2 0 0,1 21,5Z"/>
                        </svg>
                        <div>Conteneur</div>
                    </div>
                    <div class="component-item" draggable="true">
                        <svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                            <path fill="currentColor" d="M5 3c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2H5zm0 2h14v14H5V5zm2 2v2h10V7H7zm0 4v2h10v-2H7zm0 4v2h7v-2H7z"/>
                        </svg>
                        <div>Texte</div>
                    </div>
                    <div class="component-item" draggable="true">
                        <svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                            <path fill="currentColor" d="M8.5,13.5L11,16.5L14.5,12L19,18H5M21,19V5C21,3.89 20.1,3 19,3H5A2,2 0 0,0 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0
                </div>
            </div>
        </div>

        <!-- Workspace -->
        <div class="workspace">
            <div class="toolbar">
                <button class="toolbar-btn" onclick="saveProject()">
                    <svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                        <path fill="currentColor" d="M5 4v16h14V4H5zm2 2h10v12H7V6zm5 1.5c-.83 0-1.5.67-1.5 1.5S11.17 10.5 12 10.5s1.5-.67 1.5-1.5S12.83 7.5 12 7.5zm0 4c-1.1 0-2 .9-2 2v1h4v-1c0-1.1-.9-2-2-2z"/>
                    </svg>
                    Enregistrer
                </button>
                <button class="toolbar-btn" onclick="previewProject()">
                    <svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                        <path fill="currentColor" d="M12 4.5C7.05 4.5 2.73 7.61 1 12c1.73 4.39 6.05 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6.05-7.5-11-7.5zm0 13c-3.87 0-7.19-2.69-8.48-6 1.29-3.31 4.61-6 8.48-6s7.19 2.69 8.48 6c-1.29 3.31-4.61 6-8.48 6zm0-10c-2.21 0-4 1.79-4 4s1.79 4 4 4 4-1.79 4-4-1.79-4-4-4zm0 6c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2z"/>
                    </svg>
                    AperÃ§u
                </button>
            </div>
            <div class="editor-area">
                <div class="code-editor">
                    <div class="code-editor-tabs">
                        <div class="editor-tab active" onclick="switchTab('html')">
                            <svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                <path fill="currentColor" d="M12 2L1.5 21h21L12 2zm0 3.84L18.93 19H5.07L12 5.84zM11 10h2v6h-2v-6zm0 8h2v2h-2v-2z"/>
                            </svg>
                            HTML
                        </div>
                        <div class="editor-tab" onclick="switchTab('css')">
                            <svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                <path fill="currentColor" d="M12 2L1.5 21h21L12 2zm0 3.84L18.93 19H5.07L12 5.84zM11 10h2v6h-2v-6zm0 8h2v2h-2v-2z"/>
                            </svg>
                            CSS
                        </div>
                        <div class="editor-tab" onclick="switchTab('js')">
                            <svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                <path fill="currentColor" d="M12 2L1.5 21h21L12 2zm0 3.84L18.93 19H5.07L12 5.84zM11 10h2v6h-2v-6zm0 8h2v2h-2v-2z"/>
                            </svg>
                            JS
                        </div>
                    </div>
                    <div class="code-panel">
                        <pre class="code-content" id="html-code" contenteditable="true">
&lt;!-- HTML content here --&gt;
                        </pre>
                        <pre class="code-content hidden" id="css-code" contenteditable="true">
/* CSS content here */
                        </pre>
                        <pre class="code-content hidden" id="js-code" contenteditable="true">
/* JS content here */
                        </pre>
                    </div>
                </div>
                <div class="preview-area">
                    <div class="preview-header">
                        <div class="device-selector">
                            <button class="device-btn active" onclick="setDevice('desktop')">
                                <svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                    <path fill="currentColor" d="M21 4H3c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h18c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 14H3V6h18v12zM9 18h6v2H9v-2z"/>
                                </svg>
                            </button>
                            <button class="device-btn" onclick="setDevice('tablet')">
                                <svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                    <path fill="currentColor" d="M17 1H7C5.9 1 5 1.9 5 3v18c0 1.1.9 2 2 2h10c1.1 0 2-.9 2-2V3c0-1.1-.9-2-2-2zm0 18H7V3h10v16z"/>
                                </svg>
                            </button>
                            <button class="device-btn" onclick="setDevice('mobile')">
                                <svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                    <path fill="currentColor" d="M17 1H7C5.9 1 5 1.9 5 3v18c0 1.1.9 2 2 2h10c1.1 0 2-.9 2-2V3c0-1.1-.9-2-2-2zm0 18H7V3h10v16z"/>
                                </svg>
                            </button>
                        </div>
                        <div class="preview-actions">
                            <button class="toolbar-btn" onclick="refreshPreview()">
                                <svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                    <path fill="currentColor" d="M12 4V1L8 5l4 4V6c3.31 0 6 2.69 6 6 0 1.66-.67 3.16-1.76 4.24l1.42 1.42C19.07 15.9 20 14.05 20 12c0-4.42-3.58-8-8-8zm-6 6c0-1.66.67-3.16 1.76-4.24L6.34 4.34C4.93 5.9 4 7.75 4 10c0 4.42 3.58 8 8 8v3l4-4-4-4v3c-3.31 0-6-2.69-6-6z"/>
                                </svg>
                                Actualiser
                            </button>
                        </div>
                    </div>
                    <div class="preview-frame-container">
                        <iframe id="preview-frame" class="preview-frame"></iframe>
                    </div>
                </div>
            </div>
        </div>

        <!-- Properties Panel -->
        <div class="properties-panel">
            <div class="panel-header">
                <span>PropriÃ©tÃ©s</span>
                <button class="panel-close" onclick="closePropertiesPanel()">
                    <svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                        <path fill="currentColor" d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"/>
                    </svg>
                </button>
            </div>
            <div class="panel-content">
                <!-- Property groups and inputs will be dynamically added here -->
            </div>
        </div>
    </div>

    <!-- Status Bar -->
    <div class="status-bar">
        <div class="status-info">
            <div class="status-item">
                <svg viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path fill="currentColor" d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"/>
                </svg>
                <span>PrÃªt</span>
            </div>
        </div>
    </div>

    <script>
        /**
 * WebStudio Pro - Ã‰diteur HTML Professionnel
 * Script JavaScript principal
 */

document.addEventListener('DOMContentLoaded', () => {
    // Initialisation de l'application
    initEditor();
    initComponentDragAndDrop();
    initPropertyPanel();
    initAutoSave();
    setupEventListeners();
    refreshPreview();
});

// Variables globales
let currentTab = 'html';
let selectedElement = null;
let projectHistory = [];
let historyPosition = -1;
let lastSavedState = null;
let autoSaveInterval = null;
let isModified = false;
let projectConfig = {
    name: 'Nouveau projet',
    lastModified: new Date(),
    responsive: true,
    author: 'Utilisateur'
};

/**
 * Initialisation des Ã©diteurs de code avec coloration syntaxique
 */
function initEditor() {
    // Initialisation des Ã©diteurs pour chaque langage
    const htmlEditor = document.getElementById('html-code');
    const cssEditor = document.getElementById('css-code');
    const jsEditor = document.getElementById('js-code');
    
    // Ajout des numÃ©ros de ligne
    addLineNumbers(htmlEditor);
    addLineNumbers(cssEditor);
    addLineNumbers(jsEditor);
    
    // Ã‰coute des modifications dans le code
    [htmlEditor, cssEditor, jsEditor].forEach(editor => {
        editor.addEventListener('input', () => {
            isModified = true;
            updateStatusBar('ModifiÃ©');
            saveHistoryState();
        });
        
        // Indentation automatique
        editor.addEventListener('keydown', handleEditorKeyDown);
    });
    
    // Initialiser avec du contenu par dÃ©faut
    htmlEditor.textContent = `<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <title>Mon site</title>
</head>
<body>
    <h1>Bienvenue sur mon site</h1>
    <p>Ceci est un paragraphe de test.</p>
</body>
</html>`;

    cssEditor.textContent = `body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 20px;
    color: #333;
}

h1 {
    color: #2c3e50;
}`;

    jsEditor.textContent = `// JavaScript ici
document.addEventListener('DOMContentLoaded', function() {
    console.log('Site chargÃ© !');
});`;

    // Ajouter Ã  l'historique
    saveHistoryState();
}

/**
 * Ajouter des numÃ©ros de ligne Ã  l'Ã©diteur
 */
function addLineNumbers(editor) {
    const linesContainer = document.createElement('div');
    linesContainer.className = 'line-numbers';
    
    editor.parentNode.insertBefore(linesContainer, editor);
    editor.addEventListener('input', () => updateLineNumbers(editor, linesContainer));
    editor.addEventListener('scroll', () => {
        linesContainer.scrollTop = editor.scrollTop;
    });
    
    updateLineNumbers(editor, linesContainer);
}

/**
 * Mise Ã  jour des numÃ©ros de ligne
 */
function updateLineNumbers(editor, linesContainer) {
    const lines = editor.textContent.split('\n').length;
    let lineNumbersHTML = '';
    
    for (let i = 1; i <= lines; i++) {
        lineNumbersHTML += `<div>${i}</div>`;
    }
    
    linesContainer.innerHTML = lineNumbersHTML;
}

/**
 * Gestion des touches spÃ©ciales dans l'Ã©diteur
 */
function handleEditorKeyDown(e) {
    const editor = e.target;
    
    // Tabulation
    if (e.key === 'Tab') {
        e.preventDefault();
        document.execCommand('insertText', false, '    ');
    }
    
    // Auto-fermeture des balises
    if (e.key === '>' && currentTab === 'html') {
        const selection = window.getSelection();
        const range = selection.getRangeAt(0);
        const cursorPosition = range.startOffset;
        const text = editor.textContent;
        
        // Recherche de l'ouverture de balise
        let openTagStart = text.lastIndexOf('<', cursorPosition - 1);
        if (openTagStart > -1) {
            const tagContent = text.substring(openTagStart + 1, cursorPosition);
            
            // Ignorer les balises de fermeture ou les balises auto-fermantes
            if (!tagContent.startsWith('/') && !tagContent.endsWith('/')) {
                // Extraire le nom de la balise
                const tagName = tagContent.split(' ')[0];
                const autoCloseTags = ['br', 'hr', 'img', 'input', 'link', 'meta'];
                
                if (!autoCloseTags.includes(tagName)) {
                    setTimeout(() => {
                        document.execCommand('insertText', false, `</${tagName}>`);
                        // Repositionner le curseur
                        const newRange = document.createRange();
                        newRange.setStart(editor.firstChild, cursorPosition);
                        newRange.setEnd(editor.firstChild, cursorPosition);
                        selection.removeAllRanges();
                        selection.addRange(newRange);
                    }, 0);
                }
            }
        }
    }
    
    // Indentation automatique pour les accolades
    if (e.key === 'Enter') {
        const selection = window.getSelection();
        const range = selection.getRangeAt(0);
        const cursorPosition = range.startOffset;
        const text = editor.textContent;
        
        if (cursorPosition > 0 && text[cursorPosition - 1] === '{') {
            // Calculer l'indentation actuelle
            let lineStart = text.lastIndexOf('\n', cursorPosition) + 1;
            let indentation = '';
            for (let i = lineStart; i < text.length && /\s/.test(text[i]); i++) {
                indentation += text[i];
            }
            
            setTimeout(() => {
                // Ajouter indentation + 4 espaces + nouvelle ligne avec mÃ¨me indentation
                document.execCommand('insertText', false, '\n' + indentation + '    \n' + indentation + '}');
                
                // Positionner le curseur aprÃ¨s l'indentation
                const newCursorPos = cursorPosition + indentation.length + 5;
                const newRange = document.createRange();
                newRange.setStart(editor.firstChild, newCursorPos);
                newRange.setEnd(editor.firstChild, newCursorPos);
                selection.removeAllRanges();
                selection.addRange(newRange);
            }, 0);
            
            e.preventDefault();
        }
    }
    
    // Raccourcis clavier
    if (e.ctrlKey || e.metaKey) {
        switch (e.key) {
            case 's':
                e.preventDefault();
                saveProject();
                break;
            case 'z':
                e.preventDefault();
                if (!e.shiftKey) undo();
                else redo();
                break;
            case 'y':
                e.preventDefault();
                redo();
                break;
        }
    }
}

/**
 * Initialisation du drag & drop pour les composants
 */
function initComponentDragAndDrop() {
    const componentItems = document.querySelectorAll('.component-item');
    const previewFrame = document.getElementById('preview-frame');
    
    componentItems.forEach(item => {
        item.addEventListener('dragstart', (e) => {
            e.dataTransfer.setData('text/plain', item.querySelector('div').textContent);
        });
    });
    
    // Activer drop zone dans l'Ã©diteur HTML
    const htmlEditor = document.getElementById('html-code');
    
    htmlEditor.addEventListener('dragover', (e) => {
        e.preventDefault();
        htmlEditor.classList.add('dragover');
    });
    
    htmlEditor.addEventListener('dragleave', () => {
        htmlEditor.classList.remove('dragover');
    });
    
    htmlEditor.addEventListener('drop', (e) => {
        e.preventDefault();
        htmlEditor.classList.remove('dragover');
        
        const componentType = e.dataTransfer.getData('text/plain');
        insertComponent(componentType, htmlEditor);
    });
}

/**
 * InsÃ©rer un composant HTML dans l'Ã©diteur
 */
function insertComponent(componentType, editor) {
    let componentCode = '';
    
    switch(componentType) {
        case 'Section':
            componentCode = `<section class="section">
    <div class="container">
        <h2>Titre de section</h2>
        <p>Contenu de la section</p>
    </div>
</section>`;
            break;
        case 'Conteneur':
            componentCode = `<div class="container">
    <!-- Contenu du conteneur -->
</div>`;
            break;
        case 'Texte':
            componentCode = `<p>Votre texte ici</p>`;
            break;
        default:
            componentCode = `<!-- Composant ${componentType} -->`;
    }
    
    // InsÃ©rer le code Ã  la position du curseur
    const selection = window.getSelection();
    const range = selection.getRangeAt(0);
    
    document.execCommand('insertText', false, componentCode);
    
    // Mettre Ã  jour l'aperÃ§u
    refreshPreview();
    saveHistoryState();
    isModified = true;
    updateStatusBar('ModifiÃ©');
}

/**
 * Changer d'onglet d'Ã©diteur (HTML, CSS, JS)
 */
function switchTab(tab) {
    document.querySelectorAll('.editor-tab').forEach(tabElement => {
        tabElement.classList.remove('active');
    });
    document.querySelectorAll('.code-content').forEach(contentElement => {
        contentElement.classList.add('hidden');
    });
    document.getElementById(`${tab}-code`).classList.remove('hidden');
    document.querySelector(`.editor-tab[onclick="switchTab('${tab}')"]`).classList.add('active');
    currentTab = tab;
}

/**
 * Changer le mode d'affichage de l'aperÃ§u (bureau, tablette, mobile)
 */
function setDevice(device) {
    document.querySelectorAll('.device-btn').forEach(btn => {
        btn.classList.remove('active');
    });
    document.querySelector(`.device-btn[onclick="setDevice('${device}')"]`).classList.add('active');
    const previewFrame = document.getElementById('preview-frame');
    
    // DÃ©finir les largeurs pour chaque type d'appareil
    switch(device) {
        case 'desktop':
            previewFrame.style.width = '100%';
            break;
        case 'tablet':
            previewFrame.style.width = '768px';
            break;
        case 'mobile':
            previewFrame.style.width = '375px';
            break;
    }
    
    previewFrame.className = `preview-frame ${device}`;
}

/**
 * RafraÃ®chir l'aperÃ§u avec le code actuel
 */
function refreshPreview() {
    const htmlContent = document.getElementById('html-code').textContent;
    const cssContent = document.getElementById('css-code').textContent;
    const jsContent = document.getElementById('js-code').textContent;
    const previewFrame = document.getElementById('preview-frame');
    const previewDocument = previewFrame.contentDocument || previewFrame.contentWindow.document;
    
    previewDocument.open();
    previewDocument.write(`
        <!DOCTYPE html>
        <html lang="fr">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <style>${cssContent}</style>
        </head>
        <body>
            ${htmlContent}
            <script>${jsContent}<\/script>
        </body>
        </html>
    `);
    previewDocument.close();
    
    // Ajouter des Ã©couteurs d'Ã©vÃ©nements pour la sÃ©lection des Ã©lÃ©ments
    setupPreviewSelectors(previewDocument);
    
    updateStatusBar('AperÃ§u mis Ã  jour');
}

/**
 * Configuration des sÃ©lecteurs d'Ã©lÃ©ments dans l'aperÃ§u
 */
function setupPreviewSelectors(previewDocument) {
    const allElements = previewDocument.querySelectorAll('*');
    
    allElements.forEach(element => {
        // Ignorer les Ã©lÃ©ments de base
        if (['HTML', 'HEAD', 'BODY', 'SCRIPT', 'STYLE'].includes(element.tagName)) {
            return;
        }
        
        element.addEventListener('click', (e) => {
            e.preventDefault();
            e.stopPropagation();
            
            // Supprimer la sÃ©lection prÃ©cÃ©dente
            previewDocument.querySelectorAll('.element-selected').forEach(el => {
                el.classList.remove('element-selected');
            });
            
            // Ajouter la classe de sÃ©lection
            element.classList.add('element-selected');
            selectedElement = element;
            
            // Afficher les propriÃ©tÃ©s
            showProperties(element);
        });
        
        // Surbrillance au survol
        element.addEventListener('mouseover', () => {
            element.style.outline = '2px dashed #3498db';
        });
        
        element.addEventListener('mouseout', () => {
            if (!element.classList.contains('element-selected')) {
                element.style.outline = '';
            }
        });
    });
    
    // Ajouter une feuille de style pour les Ã©lÃ©ments sÃ©lectionnÃ©s
    const styleElement = previewDocument.createElement('style');
    styleElement.textContent = `
        .element-selected {
            outline: 2px solid #e74c3c !important;
            outline-offset: 2px;
        }
    `;
    previewDocument.head.appendChild(styleElement);
}

/**
 * Initialisation du panneau de propriÃ©tÃ©s
 */
function initPropertyPanel() {
    const propertiesPanel = document.querySelector('.properties-panel');
    const panelContent = propertiesPanel.querySelector('.panel-content');
    
    // Masquer le panneau au dÃ©but
    propertiesPanel.style.display = 'none';
}

/**
 * Afficher les propriÃ©tÃ©s d'un Ã©lÃ©ment dans le panneau
 */
function showProperties(element) {
    const propertiesPanel = document.querySelector('.properties-panel');
    const panelContent = propertiesPanel.querySelector('.panel-content');
    
    // Afficher le panneau
    propertiesPanel.style.display = 'flex';
    
    // Nettoyer le contenu prÃ©cÃ©dent
    panelContent.innerHTML = '';
    
    // Ajouter les informations de base
    const basicInfo = document.createElement('div');
    basicInfo.className = 'property-group';
    basicInfo.innerHTML = `
        <h3>Ã‰lÃ©ment</h3>
        <div class="property-row">
            <label>Type</label>
            <span>${element.tagName.toLowerCase()}</span>
        </div>
        ${element.id ? `
        <div class="property-row">
            <label>ID</label>
            <span>${element.id}</span>
        </div>` : ''}
        ${element.className ? `
        <div class="property-row">
            <label>Classes</label>
            <span>${element.className}</span>
        </div>` : ''}
    `;
    panelContent.appendChild(basicInfo);
    
    // Ajouter les propriÃ©tÃ©s de style
    const styleProperties = document.createElement('div');
    styleProperties.className = 'property-group';
    styleProperties.innerHTML = '<h3>Style</h3>';
    
    // Ajouter les propriÃ©tÃ©s courantes
    const commonProperties = [
        { name: 'width', label: 'Largeur' },
        { name: 'height', label: 'Hauteur' },
        { name: 'background-color', label: 'Couleur de fond' },
        { name: 'color', label: 'Couleur du texte' },
        { name: 'font-size', label: 'Taille de police' },
        { name: 'margin', label: 'Marge' },
        { name: 'padding', label: 'Remplissage' }
    ];
    
    const computedStyle = window.getComputedStyle(element);
    
    commonProperties.forEach(prop => {
        const value = computedStyle[prop.name];
        
        const propertyRow = document.createElement('div');
        propertyRow.className = 'property-row';
        
        let inputType = 'text';
        let inputElement = '';
        
        // DÃ©terminer le type d'entrÃ©e appropriÃ©
        if (prop.name === 'background-color' || prop.name === 'color') {
            inputType = 'color';
            const hexColor = rgbToHex(value);
            inputElement = `<input type="${inputType}" value="${hexColor}" data-property="${prop.name}">`;
        } else {
            inputElement = `<input type="${inputType}" value="${value}" data-property="${prop.name}">`;
        }
        
        propertyRow.innerHTML = `
            <label>${prop.label}</label>
            ${inputElement}
        `;
        styleProperties.appendChild(propertyRow);
        
        // Ajouter un Ã©couteur d'Ã©vÃ©nements pour mettre Ã  jour le style
        const input = propertyRow.querySelector('input');
        input.addEventListener('change', (e) => {
            updateElementStyle(element, prop.name, e.target.value);
        });
    });
    
    panelContent.appendChild(styleProperties);
    
    // Ajouter les actions sur l'Ã©lÃ©ment
    const actionsGroup = document.createElement('div');
    actionsGroup.className = 'property-group';
    actionsGroup.innerHTML = `
        <h3>Actions</h3>
        <div class="property-actions">
            <button class="action-btn" id="duplicate-element">Dupliquer</button>
            <button class="action-btn" id="delete-element">Supprimer</button>
        </div>
    `;
    panelContent.appendChild(actionsGroup);
    
    // Ajouter les Ã©couteurs d'Ã©vÃ©nements pour les actions
    document.getElementById('duplicate-element').addEventListener('click', () => {
        duplicateElement(element);
    });
    
    document.getElementById('delete-element').addEventListener('click', () => {
        deleteElement(element);
    });
}

/**
 * Fermer le panneau de propriÃ©tÃ©s
 */
function closePropertiesPanel() {
    document.querySelector('.properties-panel').style.display = 'none';
    
    // DÃ©sÃ©lectionner l'Ã©lÃ©ment dans l'aperÃ§u
    const previewFrame = document.getElementById('preview-frame');
    const previewDocument = previewFrame.contentDocument || previewFrame.contentWindow.document;
    
    previewDocument.querySelectorAll('.element-selected').forEach(el => {
        el.classList.remove('element-selected');
        el.style.outline = '';
    });
    
    selectedElement = null;
}

/**
 * Mettre Ã  jour le style d'un Ã©lÃ©ment
 */
function updateElementStyle(element, property, value) {
    element.style[property] = value;
    
    // Mettre Ã  jour le code HTML
    updateHtmlCode();
    isModified = true;
    updateStatusBar('ModifiÃ©');
}

/**
 * Dupliquer un Ã©lÃ©ment
 */
function duplicateElement(element) {
    const clone = element.cloneNode(true);
    element.parentNode.insertBefore(clone, element.nextSibling);
    
    // Mettre Ã  jour le code HTML
    updateHtmlCode();
    refreshPreview();
    saveHistoryState();
    isModified = true;
    updateStatusBar('Ã‰lÃ©ment dupliquÃ©');
}

/**
 * Supprimer un Ã©lÃ©ment
 */
function deleteElement(element) {
    element.parentNode.removeChild(element);
    
    // Mettre Ã  jour le code HTML
    updateHtmlCode();
    refreshPreview();
    closePropertiesPanel();
    saveHistoryState();
    isModified = true;
    updateStatusBar('Ã‰lÃ©ment supprimÃ©');
}

/**
 * Mettre Ã  jour le code HTML depuis l'aperÃ§u
 */
function updateHtmlCode() {
    const previewFrame = document.getElementById('preview-frame');
    const previewDocument = previewFrame.contentDocument || previewFrame.contentWindow.document;
    const htmlEditor = document.getElementById('html-code');
    
    // Obtenir le code HTML du body
    const bodyContent = previewDocument.body.innerHTML;
    
    // Mettre Ã  jour l'Ã©diteur HTML
    htmlEditor.textContent = bodyContent;
    
    // Mettre Ã  jour les numÃ©ros de ligne
    const linesContainer = htmlEditor.previousSibling;
    if (linesContainer && linesContainer.className === 'line-numbers') {
        updateLineNumbers(htmlEditor, linesContainer);
    }
}

/**
 * Convertir RGB en Hex pour les sÃ©lecteurs de couleur
 */
function rgbToHex(rgb) {
    // GÃ©rer 'rgb(r, g, b)' et les formats de couleur nommÃ©s
    if (!rgb.startsWith('rgb')) {
        return rgb;
    }
    
    const rgbArray = rgb.match(/\d+/g);
    if (!rgbArray || rgbArray.length < 3) {
        return '#000000';
    }
    
    return '#' + rgbArray.slice(0, 3).map(x => {
        const hex = parseInt(x).toString(16);
        return hex.length === 1 ? '0' + hex : hex;
    }).join('');
}

/**
 * Enregistrer l'Ã©tat actuel dans l'historique
 */
function saveHistoryState() {
    const htmlCode = document.getElementById('html-code').textContent;
    const cssCode = document.getElementById('css-code').textContent;
    const jsCode = document.getElementById('js-code').textContent;
    
    // Limiter la taille de l'historique
    if (historyPosition < projectHistory.length - 1) {
        projectHistory = projectHistory.slice(0, historyPosition + 1);
    }
    
    // Ajouter Ã  l'historique si diffÃ©rent
    const currentState = { html: htmlCode, css: cssCode, js: jsCode };
    
    if (historyPosition < 0 || 
        JSON.stringify(currentState) !== JSON.stringify(projectHistory[historyPosition])) {
        projectHistory.push(currentState);
        historyPosition = projectHistory.length - 1;
    }
    
    // Activer/dÃ©sactiver les boutons d'annulation/rÃ©tablissement
    updateUndoRedoButtons();
}

/**
 * Mettre Ã  jour les boutons d'annulation/rÃ©tablissement
 */
function updateUndoRedoButtons() {
    // Cette fonction peut Ãªtre Ã©tendue pour ajouter des boutons d'annulation/rÃ©tablissement
    // Ã  l'interface utilisateur
    // console.log(`Undo: ${historyPosition > 0}, Redo: ${historyPosition < projectHistory.length - 1}`);
}

/**
 * Annuler la derniÃ¨re modification
 */
function undo() {
    if (historyPosition > 0) {
        historyPosition--;
        restoreHistoryState();
    } else {
        updateStatusBar('Impossible d\'annuler davantage');
    }
}

/**
 * RÃ©tablir la derniÃ¨re modification annulÃ©e
 */
function redo() {
    if (historyPosition < projectHistory.length - 1) {
        historyPosition++;
        restoreHistoryState();
    } else {
        updateStatusBar('Impossible de rÃ©tablir davantage');
    }
}

/**
 * Restaurer un Ã©tat de l'historique
 */
function restoreHistoryState() {
    const state = projectHistory[historyPosition];
    
    document.getElementById('html-code').textContent = state.html;
    document.getElementById('css-code').textContent = state.css;
    document.getElementById('js-code').textContent = state.js;
    
    // Mettre Ã  jour les numÃ©ros de ligne
    updateAllLineNumbers();
    
    // RafraÃ®chir l'aperÃ§u
    refreshPreview();
    
    // Mettre Ã  jour les boutons d'annulation/rÃ©tablissement
    updateUndoRedoButtons();
    
    updateStatusBar('Ã‰tat restaurÃ©');
}

/**
 * Mettre Ã  jour tous les numÃ©ros de ligne
 */
function updateAllLineNumbers() {
    const editors = ['html-code', 'css-code', 'js-code'];
    
    editors.forEach(editorId => {
        const editor = document.getElementById(editorId);
        const linesContainer = editor.previousSibling;
        if (linesContainer && linesContainer.className === 'line-numbers') {
            updateLineNumbers(editor, linesContainer);
        }
    });
}

/**
 * Enregistrer le projet
 */
function saveProject() {
    const htmlCode = document.getElementById('html-code').textContent;
    const cssCode = document.getElementById('css-code').textContent;
    const jsCode = document.getElementById('js-code').textContent;
    
    const projectData = {
        html: htmlCode,
        css: cssCode,
        js: jsCode,
        config: projectConfig
    };
    
    // Simuler la sauvegarde (dans une application rÃ©elle, cela enverrait au serveur)
    localStorage.setItem('webstudio_project', JSON.stringify(projectData));
    
    lastSavedState = JSON.stringify(projectData);
    isModified = false;
    projectConfig.lastModified = new Date();
    
    updateStatusBar('Projet enregistrÃ©');
}

/**
 * Charger un projet sauvegardÃ©
 */
function loadProject() {
    const savedProject = localStorage.getItem('webstudio_project');
    if (savedProject) {
        try {
            const projectData = JSON.parse(savedProject);
            
            document.getElementById('html-code').textContent = projectData.html || '';
            document.getElementById('css-code').textContent = projectData.css || '';
            document.getElementById('js-code').textContent = projectData.js || '';
            
            if (projectData.config) {
                projectConfig = projectData.config;
            }
            
            // Mettre Ã  jour les numÃ©ros de ligne
            updateAllLineNumbers();
            
            // RafraÃ®chir l'aperÃ§u
            refreshPreview();
            
            // RÃ©initialiser l'historique
            projectHistory = [{ html: projectData.html, css: projectData.css, js: projectData.js }];
            historyPosition = 0;
            
            lastSavedState = savedProject;
            isModified = false;
            
            updateStatusBar('Projet chargÃ©');
        } catch (error) {
            console.error('Erreur lors du chargement du projet:', error);
            updateStatusBar('Erreur lors du chargement');
        }
    } else {
        updateStatusBar('Aucun projet sauvegardÃ©');
    }
}

/**
 * Initialiser l'auto-sauvegarde
 */
function initAutoSave() {
    autoSaveInterval = setInterval(() => {
        if (isModified) {
            const htmlCode = document.getElementById('html-code').textContent;
            const cssCode = document.getElementById('css-code').textContent;
            const jsCode = document.getElementById('js-code').textContent;
            
            const projectData = {
                html: htmlCode,
                css: cssCode,
                js: jsCode,
                config: projectConfig
            };
            
            localStorage.setItem('webstudio_autosave', JSON.stringify(projectData));
            updateStatusBar('Auto-sauvegarde effectuÃ©e', 1500);
        }
    }, 60000); // Auto-sauvegarde toutes les minutes
}

/**
 * RÃ©cupÃ©rer une auto-sauvegarde
 */
function recoverAutoSave() {
    const autoSave = localStorage.getItem('webstudio_autosave');
    if (autoSave) {
        if (confirm('Une sauvegarde automatique a Ã©tÃ© trouvÃ©e. Voulez-vous la rÃ©cupÃ©rer ?')) {
            try {
                const projectData = JSON.parse(autoSave);
                
                document.getElementById('html-code').textContent = projectData.html || '';
                document.getElementById('css-code').textContent = projectData.css || '';
                document.getElementById('js-code').textContent = projectData.js || '';
                
                if (projectData.config) {
                    projectConfig = projectData.config;
                }
                
                // Mettre Ã  jour les numÃ©ros de ligne
                updateAllLineNumbers();
                
                // RafraÃ®chir l'aperÃ§u
                refreshPreview();
                
                updateStatusBar('Auto-sauvegarde rÃ©cupÃ©rÃ©e');
            } catch (error) {
                console.error('Erreur lors de la rÃ©cupÃ©ration:', error);
                updateStatusBar('Erreur de rÃ©cupÃ©ration');
            }
        }
    }
}

/**
 * Exporter le projet
 */
function exportProject() {
    const htmlCode = document.getElementById('html-code').textContent;
    const cssCode = document.getElementById('css-code').textContent;
    const jsCode = document.getElementById('js-code').textContent;
    
    // CrÃ©er le contenu HTML final
    const finalHtml = `<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${projectConfig.name}</title>
    <style>
${cssCode}
    </style>
</head>
<body>
${htmlCode}
    <script>
${jsCode}
    </script>
</body>
</html>`;
    
    // CrÃ©er un objet Blob
    const blob = new Blob([finalHtml], { type: 'text/html' });
    
    // CrÃ©er un lien de tÃ©lÃ©chargement
    const link = document.createElement('a');
    link.href = URL.createObjectURL(blob);
    link.download = `${projectConfig.name.replace(/\s+/g, '-').toLowerCase()}.html`;
    
    // Simuler un clic sur le lien
    
    </script>
</body>
</html>
